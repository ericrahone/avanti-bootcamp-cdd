# -*- coding: utf-8 -*-
"""EstatisticaDescritiva.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ITFXf_rO1azDKst1I-gxVr3b3JkvJTfc

# Análise descritiva
Nessa atividade, o objetivo será demonstrar um pouco sobre a estatística descritiva utilizando quatro tipos de conjuntos de dados diferentes.

### Import packages
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pandas
import pandas as pd
# %pip install seaborn
import seaborn as sns

"""### Import datasets
Importaremos os datasets disponibilisados pela biblioteca seaborn, são elas: penguins, tips, titanic, anscombe.

Para início dos nossos códigos, começarei importanto as bibliotecas mais importantes que utilizaremos no decorrer da atividade.
"""

# Import penguins
penguins = sns.load_dataset('penguins')
penguins.head()

# Import tips
tips = sns.load_dataset('tips')
tips.head()

# Import titanic
titanic = sns.load_dataset('titanic')
titanic.head()

# Import anscombe
anscombe = sns.load_dataset('anscombe')
anscombe.head()

"""### Criar dicionário de dados
Agora criaremos um dicionário de dados para cada conjunto de dados, caracterizando cada tipo de coluna por nome, descrição, tipo de dado, e tipo de dado numpy.

Faremos isso utilizando o método de listas, e depois criaremos um dataframe para cada dicionário.

#### Penguins(dic):
"""

penguins_dc = pd.DataFrame({
    'nome_coluna':['species', 'island', 'bill_lenght_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'sex'],
    'descricao':['Tipo da espécie de pinguim', 'Lugar onde se encontra a espécie', 'Comprimento do bico', 'Profundidade do bico', 'Comprimento da nadadeira', 'Peso em gramas', 'Gênero do animal'],
    'tipo_dado':['Categórico', 'Categórico', 'Numérico', 'Numérico', 'Numérico', 'Numérico', 'Categórico'],
    'tipo_dado_np':['Object', 'Object', 'Float64', 'Float64', 'Float64', 'Float64', 'Object']
})

penguins_dc

"""#### Tips(dic):"""

tips_dc = pd.DataFrame({
    'nome_coluna':['total_bill', 'tip', 'sex', 'smoker', 'day', 'time', 'size'],
    'descricao':['Total da conta', 'Gorjeta em porcentagem', 'Gênero', 'Fumante ou não?', 'Dia da semana', 'Horário do dia', 'Tamanho'],
    'tipo_dado':['Numérico', 'Numérico', 'Categórico', 'Categórico', 'Categórico', 'Categórico', 'Numérico'],
    'tipo_dado_np':['Float64', 'Float64', 'Category', 'Category', 'Category', 'Category', 'Int64']
})

tips_dc

"""#### Titanic(dic):"""

titanic_dc = pd.DataFrame({
    'nome_coluna':['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town', 'alive', 'alone'],
    'tipo_dado':['Categórico', 'Numérico', 'Categórico', 'Numérico', 'Numérico', 'Numérico', 'Numérico', 'Categórico', 'Categórico', 'Categórico', 'Categórico', 'Categórico', 'Categórico', 'Categórico', 'Categórico'],
    'tipo_dado_np':['Int64', 'Int64', 'Object', 'Float64', 'Int64', 'Int64', 'Float64', 'Object', 'Category', 'Object', 'Bool', 'Category', 'Object', 'Object', 'Bool']
})

titanic_dc

"""#### Anscombe(dic):"""

anscombe_dc = pd.DataFrame({
    'nome_coluna':['dataset', 'x', 'y'],
    'tipo_dado':['Categórico', 'Numérico', 'Numérico'],
    'tipo_dado_np':['Object', 'Float64', 'Float64']
})

anscombe_dc

"""### Calcular Tendência Central dos conjuntos de dados
 Após a criação dos dicionários, calcularemos mais uma etapa da análise descritiva a partir dos calculos de Tendência Central, como média, mediana e moda para cada dataset.

#### Penguins(TC):
"""

penguins.describe()

"""##### Moda:"""

penguins['bill_length_mm'].mode()

penguins['bill_depth_mm'].mode()

penguins['flipper_length_mm'].mode()

penguins['body_mass_g'].mode()

"""#### Tips(TC)"""

tips.describe()

"""##### Moda:"""

tips['total_bill'].mode()

tips['tip'].mode()

tips['size'].mode()

"""#### Titanic(TC)"""

titanic.describe()

"""##### Moda:"""

titanic['age'].mode()

titanic['sibsp'].mode()

titanic['parch'].mode()

titanic['fare'].mode()

"""#### Anscombe(TC)"""

anscombe.describe()

"""##### Moda:"""

anscombe['x'].mode()

anscombe['y'].mode()

"""### Calcular Dispersão
Agora, iremos descobrir as medidas de dispersão dos conjuntos de dados por meio de funções.

Medidas de dispersão são parâmetros estatísticos usados para determinar o grau de variabilidade dos dados de um conjunto de valores.

O cálculo desses parâmetros tornam a análise de uma amostra mais confiável, já que as variáveis de tendência central (média, mediana, moda) muitas vezes não demonstram a homogeneidade dos dados.

As medidas de dispersão são: desvio padrão, amplitude, e intervalo.

#### Penguins
"""

# View dataset
penguins.head()

"""##### Desvio Padrão:"""

# comprimento do bico
penguins['bill_length_mm'].std()

# Profundidade do bico
penguins['bill_depth_mm'].std()

# Comprimento da nadadeira
penguins['flipper_length_mm'].std()

# Massa corporal
penguins['body_mass_g'].std()

"""##### Valor Interquantil (amplitude):"""

penguins.describe()

# comprimento do bico
Q1 = penguins['bill_length_mm'].quantile(0.25)
Q2 = penguins['bill_length_mm'].quantile(0.5)
Q3 = penguins['bill_length_mm'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_1 = Q3 - Q1
print('Intervalo interquartil ', IQR_1)

# Profundidade do bico
Q1 = penguins['bill_depth_mm'].quantile(0.25)
Q2 = penguins['bill_depth_mm'].quantile(0.5)
Q3 = penguins['bill_depth_mm'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_2 = Q3 - Q1
print('Intervalo interquartil ', IQR_2)

# Comprimento da nadadeira
Q1 = penguins['flipper_length_mm'].quantile(0.25)
Q2 = penguins['flipper_length_mm'].quantile(0.5)
Q3 = penguins['flipper_length_mm'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_3 = Q3 - Q1
print('Intervalo interquartil ', IQR_3)

# Massa corporal
Q1 = penguins['body_mass_g'].quantile(0.25)
Q2 = penguins['body_mass_g'].quantile(0.5)
Q3 = penguins['body_mass_g'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_4 = Q3 - Q1
print('Intervalo interquartil ', IQR_4)

"""##### Intervalo:"""

# comprimento do bico
print("Intervalo: ", (penguins['bill_length_mm'].max() - penguins['bill_length_mm'].min()))

# Profundidade do bico
print("Intervalo: ", (penguins['bill_depth_mm'].max() - penguins['bill_depth_mm'].min()))

# Comprimento da nadadeira
print("Intervalo: ", (penguins['flipper_length_mm'].max() - penguins['flipper_length_mm'].min()))

# Massa corporal
print("Intervalo: ", (penguins['body_mass_g'].max() - penguins['body_mass_g'].min()))

"""#### Tips"""

# View dataset
tips.describe()

"""##### Desvio Padrão:"""

# Conta total
tips['total_bill'].std()

# Gorjeta
tips['tip'].std()

# Tamanho
tips['size'].std()

"""##### Valor Interquantil (amplitude):"""

tips.describe()

# Conta total
Q1 = tips['total_bill'].quantile(0.25)
Q2 = tips['total_bill'].quantile(0.5)
Q3 = tips['total_bill'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_5 = Q3 - Q1
print('Intervalo interquartil ', IQR_5)

# Gorjeta
Q1 = tips['tip'].quantile(0.25)
Q2 = tips['tip'].quantile(0.5)
Q3 = tips['tip'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_6 = Q3 - Q1
print('Intervalo interquartil ', IQR_6)

# Tamanho
Q1 = tips['size'].quantile(0.25)
Q2 = tips['size'].quantile(0.5)
Q3 = tips['size'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_7 = Q3 - Q1
print('Intervalo interquartil ', IQR_7)

"""##### Intervalo"""

# Conta total
print("Intervalo: ", (tips['total_bill'].max() - tips['total_bill'].min()))

# Gorjeta
print("Intervalo: ", (tips['tip'].max() - tips['tip'].min()))

# Tamanho
print("Intervalo: ", (tips['size'].max() - tips['size'].min()))

"""#### Titanic"""

# view dataset
titanic.describe()

"""##### Desvio Padrão:"""

# Classe do passageiro
titanic['pclass'].std()

# Idade
titanic['age'].std()

# Numero de irmãos e esposos(as) abordo
titanic['sibsp'].std()

# Numero de crianças e parentes abordo
titanic['parch'].std()

# Tarifa do passageiro
titanic['fare'].std()

"""##### Valor Interquantil (amplitude):"""

titanic.describe()

# Idade
Q1 = titanic['age'].quantile(0.25)
Q2 = titanic['age'].quantile(0.5)
Q3 = titanic['age'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_9 = Q3 - Q1
print('Intervalo interquartil ', IQR_9)

# Tarifa do passageiro
Q1 = titanic['fare'].quantile(0.25)
Q2 = titanic['fare'].quantile(0.5)
Q3 = titanic['fare'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_12 = Q3 - Q1
print('Intervalo interquartil ', IQR_12)

"""##### Intervalo:"""

# Classe do passageiro
titanic['pclass'].max() - titanic['pclass'].min()

# Idade
titanic['age'].max() - titanic['age'].min()

# Numero de irmãos e esposos(as) abordo
titanic['sibsp'].max() - titanic['sibsp'].min()

# Numero de crianças e parentes abordo
titanic['parch'].max() - titanic['parch'].min()

# Tarifa do passageiro
titanic['fare'].max() - titanic['fare'].min()

"""#### Anscombe"""

anscombe.describe()

"""##### Desvio Padrão:"""

anscombe['x'].std()

anscombe['y'].std()

"""##### Intervalo Interquantil (amplitude):"""

anscombe.describe()

Q1 = anscombe['x'].quantile(0.25)
Q2 = anscombe['x'].quantile(0.5)
Q3 = anscombe['x'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_13 = Q3 - Q1
print('Intervalo interquartil ', IQR_13)

Q1 = anscombe['y'].quantile(0.25)
Q2 = anscombe['y'].quantile(0.5)
Q3 = anscombe['y'].quantile(0.75)
print('Primeiro quartil ', Q1)
print('Segundo quartil (Mediana)', Q2)
print('Terceiro quartil ', Q3)

IQR_14 = Q3 - Q1
print('Intervalo interquartil ', IQR_14)

"""##### Intervalo"""

print("Intervalo: ", (anscombe['x'].max() - anscombe['x'].min()))

print("Intervalo: ", (anscombe['y'].max() - anscombe['y'].min()))

"""### Variáveis qualitativas
Agora vamos calcular alguns percentuais estatísticos das variáveis qualitativas de cada conjunto de dados.

#### Penguins
"""

penguins.head()

# Contamos o número de ocorrências para cada valor por sexo
frequencia_sex = penguins['sex'].value_counts()
frequencia_sex

# Calculamos a porcentagem para cada valor
percentual_sex = penguins['sex'].value_counts(normalize = True) * 100
percentual_sex

# Construímos o DataFrame com a frequência e o percentual
dist_freq_qualitativa = pd.DataFrame({'Frequência': frequencia_sex, 'Porcentagem(%)': percentual_sex})
dist_freq_qualitativa

dist_freq_qualitativa

# Contamos o número de ocorrências para cada valor por espécie
frequencia_species = penguins['species'].value_counts()
frequencia_species

# Contamos o número de ocorrências para cada valor por ilha
frequencia_island = penguins['island'].value_counts()
frequencia_island

#vamos fazer uma distribuição de frequência relacionanso sexo e espécie através de um dicionário

sexo = {0: 'Masculino',
        1: 'Feminino'}

especie = {0:'Adelie',
           1:'Gentoo',
           2:'Chinstrap'}

# construindo a tabela de frequência
frequencia = pd.crosstab(penguins.sex, penguins.species)
frequencia

#Podemos fazer a distribuição de frequências percentuais através de normalize:

percentual = pd.crosstab(penguins.sex, penguins.species, normalize = True)*100

percentual.rename(index = sexo, inplace = True)

percentual.rename(columns = especie, inplace = True)

percentual

# média de espécie Adelie por sexo
frequencia.groupby(['sex'])['Adelie'].mean()

# média de espécie Chinstrap por sexo
frequencia.groupby(['sex'])['Chinstrap'].mean()

# média de espécie Gentoo por sexo
frequencia.groupby(['sex'])['Gentoo'].mean()

"""#### Tips"""

tips.head()

# Contamos o número de ocorrências para cada valor por sexo
frequencia_sex1 = tips['sex'].value_counts()
frequencia_sex1

# Calculamos a porcentagem para cada valor
percentual_sex1 = tips['sex'].value_counts(normalize = True)*100
percentual_sex1

# Construímos o DataFrame com a frequência e o percentual
dist_freq_qualitativa1 = pd.DataFrame({'Frequência': frequencia_sex1, 'Porcentagem(%)': percentual_sex1})
dist_freq_qualitativa1

# Contamos o número de ocorrências para cada valor por dia
frequencia_day = tips['day'].value_counts()
frequencia_day

# Contamos o número de ocorrências para cada valor por horário
frequencia_time = tips['time'].value_counts()
frequencia_time

#vamos fazer uma distribuição de frequência relacionanso sexo e time através de um dicionário

sexo = {0: 'Masculino',
        1: 'Feminino'}

time = {0:'Dinner',
        1:'Lunch',
        }

# construindo a tabela de frequência
frequencia1 = pd.crosstab(tips.sex, tips.time)
frequencia1

# média de almoço por sexo
frequencia1.groupby(['sex'])['Lunch'].mean()

# média de janta por sexo
frequencia1.groupby(['sex'])['Dinner'].mean()

print("Média de almoço: ", (frequencia1.Lunch.mean()))

print("Média de janta: ", (frequencia1.Dinner.mean()))

"""#### Titanic"""

titanic.head()

# Contamos o número de ocorrências para cada valor por sexo
frequencia_sex2 = titanic['sex'].value_counts()
frequencia_sex2

# Contamos o número de ocorrências para cada valor por classe
frequencia_class = titanic['class'].value_counts()
frequencia_class

# Contamos o número de ocorrências para cada valor por cidade de embarque
frequencia_town = titanic['embark_town'].value_counts()
frequencia_town

# Contamos o número de ocorrências para cada valor se vivo ou não
frequencia_alive = titanic['alive'].value_counts()
frequencia_alive

#vamos fazer uma distribuição de frequência relacionanso sexo e alive através de um dicionário

sexo = {0: 'Masculino',
        1: 'Feminino'}

time = {0:'no',
        1:'yes',
        }

# construindo a tabela de frequência
frequencia2 = pd.crosstab(titanic.sex, titanic.alive)
frequencia2

# média de pessoas que morreram por sexo
frequencia2.groupby(['sex'])['no'].mean()